<?xml version="1.0"?>
  <database name="FUNCTION SSFI_REVERSE_RECONCILE">
    <function name="SSFI_REVERSE_RECONCILE" type="NULL">
      <parameter name="p_instance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[-- Logistice
    v_ResultStr VARCHAR2(2000):='';
    v_Message VARCHAR2(2000):='';
    v_Result NUMBER:=1; -- 0=failure
    v_Record_ID VARCHAR2(32);
    v_User_ID VARCHAR2(32):='0';
    
    v_FIN_Reconciliation_ID VARCHAR2(32);
    v_fin_financial_account_id VARCHAR2(32);
    v_Statementdate VARCHAR2(30);
    v_date_validator VARCHAR2(30);
    v_posted  VARCHAR2(3);
    v_count_extractbanc NUMBER;
    v_fin_bankstatement_ID VARCHAR2(32);
    TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;

BEGIN

    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || P_Instance_ID);
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(P_Instance_ID, NULL, 'Y', NULL, NULL);
    
    BEGIN --BODY
        -- Get Parameters
        v_ResultStr:='ReadingParameters';
        FOR Cur_Parameter IN (
            SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date
            FROM AD_PInstance i
                LEFT JOIN AD_PInstance_Para p ON i.AD_PInstance_ID = p.AD_PInstance_ID
            WHERE i.AD_PInstance_ID = P_Instance_ID
            ORDER BY p.SeqNo
        ) LOOP
            v_Record_ID := Cur_Parameter.Record_ID;
            v_User_ID := Cur_Parameter.AD_User_ID;
        END LOOP; -- Get Parameter
        -- Validar si se permite reversar la conciliación

            SELECT fin_financial_account_id , Statementdate, posted
            FROM FIN_Reconciliation 
            INTO v_fin_financial_account_id , v_Statementdate , v_posted
            WHERE FIN_Reconciliation_ID = v_Record_ID;
            
            select max(Statementdate) as date_validator
            INTO v_date_validator
            from FIN_Reconciliation 
            where fin_financial_account_id = v_fin_financial_account_id
            and docstatus = 'CO';

            IF v_Statementdate != v_date_validator THEN
                RAISE_APPLICATION_ERROR(-20000, '@ERROR=Existen reconciliaciones posteriores en estado completado, se requiere su reversión.');
            END IF;


            IF v_posted = 'Y' THEN
                RAISE_APPLICATION_ERROR(-20000, '@ERROR=Requiere descontabilizar la reconciliación antes de aplicar la reversión');
            END IF;
            
        -- DISABLED TRIGGER
            ALTER TABLE FIN_Reconciliation DISABLE TRIGGER aprm_fin_recon_check_trg;


        -- 1) Descontabilizar manualmente la transaccion de Reconciliacion
        -- 2) La reconciliacion a estado Borrador - requiere bajar trigger
            UPDATE  FIN_Reconciliation SET docstatus= 'DR'  
            WHERE FIN_Reconciliation_ID = v_Record_ID;

        -- 3) Cambiar el esatdo de las Lineas de la Reconciliacion satdo  => 'PWNC' (Concilaido a Pago reintegrado ) para q permita la reactivacion de la linea
        -- 4)Se reactiva y elimina en la fin_finacc_transaction el registro relacionado = ELIMINA LINEAS (rompe relacion con fin_reconcilaicion, la solapa lineas reconcilaicion es una vista)
        -- ELIMINAR LA RECONCILIACION Y SOLO DEJAR DE MES ANTERIOR (Aqui actualziar campo para verificar si mostarr o no boton)

        -- Ticket 3108 : Verificar si tiene extracto bancario y liberar esa reconciliacion (relaciones)
            select count(*) , bsl.fin_bankstatement_ID
            INTO v_count_extractbanc , v_fin_bankstatement_ID
            FROM fin_finacc_transaction ft
            LEFT JOIN fin_bankstatementline bsl
            ON ft.fin_finacc_transaction_id::text = bsl.fin_finacc_transaction_id::text
            WHERE ft.fin_reconciliation_id = v_Record_ID
            GROUP BY bsl.fin_bankstatement_ID   ;

            IF(v_count_extractbanc > 0 ) THEN 
                --'Existen Lineas De extracto bancario relacionadas a esta conciliacion...';
                UPDATE fin_finacc_transaction   SET FIN_Reconciliation_ID = null
                WHERE FIN_Reconciliation_ID = v_Record_ID;

                UPDATE FIN_BankStatementLine  SET fin_finacc_transaction_id = null
                where FIN_BankStatement_id = v_fin_bankstatement_ID;

                UPDATE  fin_finacc_transaction SET status= 'RDNC'  , processed = 'Y'
                where fin_financial_account_ID = v_fin_financial_account_id;

            END IF;
            --

            -- SI TIENE EXTRACTOS BANCARIOS status =  'RDNC' COBRO CONCILIADO
            IF(v_count_extractbanc <= 0 ) THEN
                UPDATE  fin_finacc_transaction 
                SET status= 'PWNC'  , FIN_Reconciliation_ID = null 
                WHERE FIN_Reconciliation_ID = v_Record_ID;
            END IF;


	    v_Message = 'Conciliación lista para ser reactivada';
        -- ENABLED TRIGGER
            ALTER TABLE FIN_Reconciliation ENABLE TRIGGER aprm_fin_recon_check_trg;

        DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message);
        AD_UPDATE_PINSTANCE(P_Instance_ID, NULL, 'N', v_Result, v_Message);

        RETURN;
    END; --BODY
    
    EXCEPTION WHEN OTHERS THEN
        v_ResultStr:= '@ERROR=' || SQLERRM;
        DBMS_OUTPUT.PUT_LINE( v_ResultStr) ;
        ROLLBACK;
        AD_UPDATE_PINSTANCE(P_Instance_ID, NULL, 'N', 0, v_ResultStr);
END SSFI_REVERSE_RECONCILE
]]></body>
    </function>
  </database>
