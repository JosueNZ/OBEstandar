<?xml version="1.0"?>
  <database name="FUNCTION SSMAACT_COMPLETE">
    <function name="SSMAACT_COMPLETE" type="NULL">
      <parameter name="pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[TYPE RECORD IS REF CURSOR;
  Cur_Parameter RECORD;
  Cur_Lines RECORD;  

  v_Client_ID VARCHAR2(32);
  v_Org_ID VARCHAR2(32);
  v_User_ID VARCHAR2(32) ;
  v_Record_ID VARCHAR2(32) ;
  v_ResultStr VARCHAR2(2000) := '';
  v_Message VARCHAR2(2000) := '';
  v_transaction VARCHAR2(60) ;
  v_invoice_id VARCHAR2(32) ;
  v_fin_payment_id VARCHAR2(32) ;
  v_openclose VARCHAR2(60) ;
  v_totaldr NUMBER:=0;
  v_totalcr NUMBER:=0;
  v_sumdr NUMBER:=0;
  v_sumcr NUMBER:=0;
  v_date DATE;    
 
  
BEGIN
 --  Update AD_PInstance
  DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || PInstance_ID) ;
  v_ResultStr := 'PInstanceNotFound';
  AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;

  BEGIN --BODY

    -- Get Parameters
    v_ResultStr := 'ReadingParameters';  
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        i.AD_Client_ID,
        i.AD_Org_ID 
                          
      FROM AD_PInstance i      
      WHERE i.AD_PInstance_ID = PInstance_ID      
      )
    LOOP
    
      v_Record_ID := Cur_Parameter.Record_ID;      
      v_Client_ID := Cur_Parameter.AD_Client_ID;
      v_Org_ID := Cur_Parameter.AD_Org_ID;
      v_User_ID := Cur_Parameter.AD_User_ID;     
      
    END LOOP; -- End Get Parameter

	SELECT transaction, c_invoice_id, fin_payment_id, TO_DATE(date)
	INTO v_transaction, v_invoice_id, v_fin_payment_id , v_date
	FROM ssmaact_modify_acct WHERE ssmaact_modify_acct_id = v_Record_ID;

	SELECT openclose INTO v_openclose
	FROM c_period 
	WHERE v_date BETWEEN startdate AND enddate;

	IF (COALESCE(v_openclose,'') IN ('O','')) THEN
		RAISE_APPLICATION_ERROR(-20000,'@PeriodNotAvailable@');
	END IF;

	SELECT total_dr, total_cr
	INTO v_totaldr, v_totalcr
	FROM ssmaact_modify_acct
	WHERE ssmaact_modify_acct_id = v_Record_ID;

	SELECT sum(amtacctdr), sum(amtacctcr)
	INTO v_sumdr, v_sumcr
	FROM ssmaact_accounting
	WHERE ssmaact_modify_acct_id = v_Record_ID;    

	IF (v_totaldr <> v_totalcr OR v_totaldr <> v_sumdr OR v_totalcr <> v_sumcr OR v_sumdr <> v_sumcr) THEN
		RAISE_APPLICATION_ERROR(-20000,'Los asientos deben coincidir en debe y haber con relaciÃ³n a los datos originales.');
	END IF;

	DELETE FROM fact_acct WHERE fact_acct_id IN 
	(SELECT fact_acct_id FROM ssmaact_audit WHERE fact_acct_id NOT IN (SELECT fact_acct_id FROM ssmaact_accounting));

	FOR Cur_Lines IN 
	(SELECT * FROM ssmaact_accounting
	WHERE ssmaact_modify_acct_id = v_Record_ID)
	LOOP

		UPDATE fact_acct 
		SET amtsourcedr=Cur_Lines.amtsourcedr, amtsourcecr=Cur_Lines.amtsourcecr, 
		amtacctdr=Cur_Lines.amtacctdr, amtacctcr=Cur_Lines.amtacctcr,
		updated=now(), updatedby= v_User_ID
		WHERE fact_acct_id = Cur_Lines.fact_acct_id;

	END LOOP;

	UPDATE ssmaact_modify_acct SET status='CO'
	WHERE ssmaact_modify_acct_id = v_Record_ID;
	
	DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
	AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, v_Message) ;			 	 	  
  				
RETURN;
END; --BODY
  EXCEPTION
  WHEN OTHERS THEN
    v_ResultStr:= '@ERROR=' || SQLERRM;
    DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
    RETURN;
END SSMAACT_COMPLETE
]]></body>
    </function>
  </database>
