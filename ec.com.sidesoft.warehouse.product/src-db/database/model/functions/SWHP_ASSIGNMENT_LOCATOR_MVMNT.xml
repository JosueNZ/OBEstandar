<?xml version="1.0"?>
  <database name="FUNCTION SWHP_ASSIGNMENT_LOCATOR_MVMNT">
    <function name="SWHP_ASSIGNMENT_LOCATOR_MVMNT" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2013 Openbravo SLU
* All Rights Reserved.
* Contributor(s): AndrÃ©s Montenegro
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_Record_ID VARCHAR2(32);
  v_User_ID VARCHAR2(32):='0';
  v_DocAction VARCHAR2(60);
  v_DocStatus VARCHAR2(60);
  v_client_id VARCHAR2(32);
  v_org_id VARCHAR2(32);
  v_m_locator_id VARCHAR2(32);
  v_m_warehouse_id VARCHAR2(32);
  v_flag VARCHAR2(32);
  v_counter NUMBER:=0;
  v_errorlines VARCHAR2(2000);
  v_errorlines2 VARCHAR2(2000);  
  
  --  Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_m_movement RECORD;
BEGIN
  DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
  v_ResultStr:='PInstanceNotFound';
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;

  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, i.AD_User_ID, i.AD_Client_ID, i.AD_Org_ID,
        p.ParameterName, p.P_String, p.P_Number, p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo) LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_User_ID:=Cur_Parameter.AD_User_ID;
      v_client_id := Cur_Parameter.AD_Client_ID;
      v_org_id := Cur_Parameter.AD_Org_ID;
    END LOOP; -- Get Parameter

   v_flag = '';

	SELECT em_swhp_warehouse_id INTO v_m_warehouse_id
	FROM m_movement 
	WHERE m_movement_id = v_Record_ID;

	IF (v_m_warehouse_id IS NULL) THEN
		RAISE_APPLICATION_ERROR(-20000,'@Swhp_WarehouseHasNotSelected@');
	END IF;
   
   For Cur_m_movement in(
	select a.m_movementline_id, a.m_product_id, b.ad_org_id, b.em_swhp_warehouse_id, c.name as product, a.line, a.m_locator_id
	from m_movementline a
	left join m_movement b on b.m_movement_id = a.m_movement_id
	left join m_product c on c.m_product_id = a.m_product_id 
	where a.m_movement_id = v_Record_ID
	order by a.line
   )
   Loop
	
	select count(*) INTO v_counter
	from m_warehouse a
	left join m_locator b on b.m_warehouse_id = a.m_warehouse_id
	left join swhp_wh_product c on c.m_locator_id = b.m_locator_id
	where a.m_warehouse_id = Cur_m_movement.em_swhp_warehouse_id --'3D65BA87C1CA4D1BAAC888C7FEA6DC9A' -- Cur_m_movement.m_warehouse_id
	and c.m_product_id = Cur_m_movement.m_product_id --'E27E97AE566C4EA7ABD449F77CF44FA0f' --Cur_m_movement.m_product_id
	and c.ad_org_id = Cur_m_movement.ad_org_id; --'EE20900630DC401D9C503C3EF98C59B4' --Cur_m_movement.ad_org_id
	
	IF (v_counter >1) THEN

		v_errorlines= coalesce(v_errorlines,'')|| ' - ' ||coalesce(Cur_m_movement.line,0);
		
	ELSIF( v_errorlines IS NULL) THEN

		select coalesce((
		select c.m_locator_id
		from m_warehouse a
		left join m_locator b on b.m_warehouse_id = a.m_warehouse_id
		left join swhp_wh_product c on c.m_locator_id = b.m_locator_id
		where a.m_warehouse_id = Cur_m_movement.em_swhp_warehouse_id --'3D65BA87C1CA4D1BAAC888C7FEA6DC9A' -- Cur_m_movement.m_warehouse_id
		and c.m_product_id = Cur_m_movement.m_product_id --'E27E97AE566C4EA7ABD449F77CF44FA0f' --Cur_m_movement.m_product_id
		and c.ad_org_id = Cur_m_movement.ad_org_id --'EE20900630DC401D9C503C3EF98C59B4' --Cur_m_movement.ad_org_id
		),'ND')
		into v_m_locator_id
		from dual;

		If(v_m_locator_id = 'ND')Then
			v_errorlines2= coalesce(v_errorlines2,'')|| ' - ' ||coalesce(Cur_m_movement.line,0);	
		ELSIF(v_errorlines2 IS NULL) THEN
			update m_movementline
			set m_locatorto_id = v_m_locator_id
			where m_movementline_id = Cur_m_movement.m_movementline_id;
			v_flag = 'OK';
		END IF;

	END IF;
   End Loop;

   IF (v_errorlines IS NOT NULL) THEN
	RAISE_APPLICATION_ERROR(-20000,'@Swhp_MoreThanOne_Location@'||v_errorlines);
   END IF;

   IF (v_errorlines2 IS NOT NULL) THEN
	RAISE_APPLICATION_ERROR(-20000,'@Swhp_NotExist_Location@'|| v_errorlines2);
   END IF;

   IF v_flag = 'OK' THEN
	UPDATE M_INOUT SET em_swhp_process ='Y' WHERE m_inout_id = v_Record_ID; 
   END IF;
        
  END; --BODY
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('Load biometric error: ' || v_ResultStr);
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr);
END SWHP_ASSIGNMENT_LOCATOR_MVMNT
]]></body>
    </function>
  </database>
