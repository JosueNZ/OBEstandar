<?xml version="1.0"?>
  <database name="FUNCTION SRCC_RECOSTEO">
    <function name="SRCC_RECOSTEO" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_MessageError VARCHAR2(2000):='';

  V_date_process DATE;
  V_hour_process TIME;
  V_date_total DATE;
  v_del_prod_cost VARCHAR2(60):='N';
  v_previous_date VARCHAR2(60):='N';
  v_script VARCHAR2(250);
  v_max_date VARCHAR2(2000);
  v_count_previus_date NUMBER:= 0;

  v_Record_ID VARCHAR2(32);
  v_Client_ID  VARCHAR2(32); 
  v_Org_ID   VARCHAR2(32); 
  v_User_ID  VARCHAR2(32); 

  TYPE RECORD IS REF CURSOR;
  Cur_Parameter RECORD;
  Cur_ExecuteScript RECORD;
  
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
       i.ad_client_id, 
       i.ad_org_id,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date,
        i.AD_User_ID
  
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID 
       
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
	  v_Record_ID:=Cur_Parameter.Record_ID;
	  v_Client_ID := Cur_Parameter.ad_client_id;
	  v_Org_ID    := Cur_Parameter.ad_org_id;
	  v_User_ID   := Cur_Parameter.AD_User_ID;  
         
      IF(Cur_Parameter.ParameterName='processdate') THEN
        V_date_process:=Cur_Parameter.P_Date;
        DBMS_OUTPUT.PUT_LINE('  processdate=' || V_date_process) ;
      END IF;
      IF(Cur_Parameter.ParameterName='processhour') THEN
        V_hour_process:=Cur_Parameter.P_Date;
        DBMS_OUTPUT.PUT_LINE('  processhour=' || V_hour_process) ;
      END IF;
      IF(Cur_Parameter.ParameterName='delprodcost') THEN
        v_del_prod_cost:=Cur_Parameter.P_String;
        DBMS_OUTPUT.PUT_LINE('  delprodcost=' || v_del_prod_cost) ;
      END IF;
      IF(Cur_Parameter.ParameterName='previous_date') THEN
        v_previous_date:=Cur_Parameter.P_String;
        DBMS_OUTPUT.PUT_LINE('  previous_date=' || v_previous_date) ;
      END IF;
    END LOOP; -- Get Parameter

    V_date_total = TO_CHAR(V_date_process,'YYYY-MM-DD')||' ' || V_hour_process;
   --  RAISE NO_DATA_FOUND || V_date_total ;
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
    -- Read Information from Record
    v_ResultStr:='Reading Record';

    -- Valida transacciones en fechas anteriores a la fecha de procesamiento
    SELECT coalesce(count(m_transaction_id),0),TO_CHAR(max(TRXPROCESSDATE::timestamp)+ '1 minute','YYYY-MM-DD HH24:MI:SS')
    INTO v_count_previus_date,v_max_date
    FROM m_transaction trx
    WHERE trx.ISPROCESSED = 'Y'	--N
    AND trx.COSTING_STATUS = 'CC'	--NC
    AND trx.TRXPROCESSDATE >= V_date_total
    AND TO_CHAR(trx.movementdate,'01/MM/yyyy')::date < TO_CHAR(V_date_total,'01/MM/yyyy')::date;

    IF(v_count_previus_date > 0 AND v_previous_date='N') THEN
      v_MessageError := 'Existen transacciones que tiene fecha de movimiento/transacción anterior a <b>'||V_date_total
                        ||'</b> <br><br><b>Opciones:</b><br> <ul><li>Si desea procesar con la fecha <b>'||V_date_total
                        ||'</b> marcar el check <b>Procesar Movimientos Ant.</b></li>'
                        ||'<li>Caso contrario procesar con la siguiente fecha sugerida: <b>'||v_max_date||'</li></ul>';
		  RAISE_APPLICATION_ERROR(-20000,v_MessageError);
    END IF;

    --INICIO

    -- 1.Desabilitar triggers

    ALTER TABLE m_costing DISABLE TRIGGER m_costing_trg;
    ALTER TABLE m_transaction DISABLE TRIGGER m_transaction_trg;
    ALTER TABLE m_transaction DISABLE TRIGGER m_transaction_trg2;
    ALTER TABLE m_transaction_cost DISABLE TRIGGER m_transaction_cost_trg;
    ALTER TABLE m_production DISABLE TRIGGER m_production_trg;

    --2. Borrar líneas de costo en base a las transacciones a reprocesar
    delete from m_costing
        where m_transaction_id in
        (
            select m_transaction_id
            from m_transaction trx
            where trx.ISPROCESSED = 'Y'	--N
            and trx.COSTING_STATUS = 'CC'	--NC
            and trx.TRXPROCESSDATE >= V_date_total	
        );
        
    -- 3.Borra transacciones costeadas, tabla m_transaction_cost
    Delete from m_transaction_cost
    where m_transaction_id IN
        (
            select m_transaction_id
            from m_transaction trx
                where trx.ISPROCESSED = 'Y'	--N
            and trx.COSTING_STATUS = 'CC'	--NC
            and trx.TRXPROCESSDATE >= V_date_total
            );

	--Check Eliminar costos de produccion		
    IF(v_del_prod_cost='Y') THEN
		-- Actualiza transacciones costeadas, tabla m_productionline
		UPDATE m_productionline
		SET calculated = 'N' , 
			calccost = null
		WHERE m_productionline_id IN
			(
				SELECT m_productionline_id
				FROM m_transaction trx
				WHERE trx.ISPROCESSED = 'Y'	--N
				AND trx.COSTING_STATUS = 'CC'	--NC
				AND trx.TRXPROCESSDATE >= V_date_total
				);

		-- Actualiza transacciones Categoria Salarial, tabla ma_pl_employee
		UPDATE ma_pl_employee
		SET calccost = null
		WHERE m_productionplan_id IN
			(
				SELECT prd.m_productionplan_id
				FROM m_transaction trx
				JOIN m_productionline prdl on prdl.m_productionline_id=trx.m_productionline_id
				JOIN m_productionplan prd on prd.m_productionplan_id=prdl.m_productionplan_id
				WHERE trx.ISPROCESSED = 'Y'	--N
				AND trx.COSTING_STATUS = 'CC'	--NC
				AND trx.TRXPROCESSDATE >= V_date_total
				GROUP BY 1
				);

		-- Actualiza transacciones Costos Indirectos, tabla ma_pl_ic
		UPDATE ma_pl_ic
		SET calccost = null
		WHERE m_productionplan_id IN
			(
				SELECT prd.m_productionplan_id
				FROM m_transaction trx
				JOIN m_productionline prdl on prdl.m_productionline_id=trx.m_productionline_id
				JOIN m_productionplan prd on prd.m_productionplan_id=prdl.m_productionplan_id
				WHERE trx.ISPROCESSED = 'Y'	--N
				AND trx.COSTING_STATUS = 'CC'	--NC
				AND trx.TRXPROCESSDATE >= V_date_total
				GROUP BY 1
				);

		-- Actualiza transacciones Maquinaria, tabla ma_pl_machine
		UPDATE ma_pl_machine
		SET calccost = null
		WHERE m_productionplan_id IN
			(
				SELECT prd.m_productionplan_id
				FROM m_transaction trx
				JOIN m_productionline prdl on prdl.m_productionline_id=trx.m_productionline_id
				JOIN m_productionplan prd on prd.m_productionplan_id=prdl.m_productionplan_id
				WHERE trx.ISPROCESSED = 'Y'	--N
				AND trx.COSTING_STATUS = 'CC'	--NC
				AND trx.TRXPROCESSDATE >= V_date_total
				GROUP BY 1
				);
    END IF;

        Update m_transaction
        set isprocessed = 'N',
        costing_status = 'NC',
        c_currency_id = null,
        iscostcalculated = 'N',
        m_costing_algorithm_id = null,
        transactioncost = null
        where m_transaction_id IN
        (
            select m_transaction_id
            from m_transaction trx
                where trx.ISPROCESSED = 'Y'	--N
            and trx.COSTING_STATUS = 'CC'	--NC
            and trx.TRXPROCESSDATE >= V_date_total
            );

    --4.crea el costo vigente
    FOR Cur_ExecuteScript IN(
    select m_product_id, max(datefrom), max(dateto), 'update m_costing set dateto = ''' || '9999-12-31 00:00:00' || ''' where m_product_id = ''' || m_product_id || ''' and dateto = ''' || max(dateto) || ''';' 
    as script 
    from m_costing
    group by m_product_id
    having max(dateto) <> '9999-12-31 00:00:00')

    LOOP
	  v_script:=Cur_ExecuteScript.script;
	  EXECUTE IMMEDIATE v_script; 
	  
    END LOOP;

    --5. Volver activar triggers
	ALTER TABLE m_costing ENABLE TRIGGER m_costing_trg;
	ALTER TABLE m_transaction ENABLE TRIGGER m_transaction_trg;
	ALTER TABLE m_transaction ENABLE TRIGGER m_transaction_trg2;
	ALTER TABLE m_transaction_cost ENABLE TRIGGER m_transaction_cost_trg;
	ALTER TABLE m_production ENABLE TRIGGER  m_production_trg;

    --FIN
    
    v_Message := 'Proceo recosteo finalizado';
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;

   
  END; --BODY
  EXCEPTION
  WHEN OTHERS THEN
    v_ResultStr:= '@ERROR=' || SQLERRM;

    DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
    RETURN;
END SRCC_RECOSTEO
]]></body>
    </function>
  </database>
