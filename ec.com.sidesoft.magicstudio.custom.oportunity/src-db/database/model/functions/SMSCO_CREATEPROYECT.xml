<?xml version="1.0"?>
  <database name="FUNCTION SMSCO_CREATEPROYECT">
    <function name="SMSCO_CREATEPROYECT" type="NULL">
      <parameter name="p_instance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[-- Logistice
    v_ResultStr VARCHAR2(2000):='';
    v_Message VARCHAR2(2000):='';
    v_Result NUMBER:=1; -- 0=failure
    v_Record_ID VARCHAR2(32);
    v_User_ID VARCHAR2(32):='0';
    
    TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
	
	v_corecord	RECORD;
	vid_CC		VARCHAR(32);
	v_dtype_id	VARCHAR(32);
	v_bpartner	RECORD;
	v_currency	VARCHAR(32);
	v_payterm_id	VARCHAR(32);
	v_document_no_seq	VARCHAR(32);
	v_tax		VARCHAR(32);
	cur_orderline	RECORD;
	v_prod		RECORD;

BEGIN

    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || P_Instance_ID);
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(P_Instance_ID, NULL, 'Y', NULL, NULL);
    
    BEGIN --BODY
        -- Get Parameters
        v_ResultStr:='ReadingParameters';
        FOR Cur_Parameter IN (
            SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date
            FROM AD_PInstance i
                LEFT JOIN AD_PInstance_Para p ON i.AD_PInstance_ID = p.AD_PInstance_ID
            WHERE i.AD_PInstance_ID = P_Instance_ID
            ORDER BY p.SeqNo
        ) LOOP
            v_Record_ID := Cur_Parameter.Record_ID;
            v_User_ID := Cur_Parameter.AD_User_ID;
        END LOOP; -- Get Parameter
		
		select * 
		into v_corecord
		from c_order co
		left join opcrm_opportunities oo on oo.opcrm_opportunities_id = co.em_smspr_opportunities_id
		where co.c_order_id = v_Record_ID;
		
		select bp.c_bpartner_id as pid, bploc.C_BPartner_Location_id as loc
		into v_bpartner
		from c_bpartner bp
		left join C_BPartner_Location bploc on bploc.c_bpartner_id = bp.c_bpartner_id
		where bp.c_bpartner_id = v_corecord.c_bpartner_id
			and bploc.isactive = 'Y'
			and bploc.isshipto = 'Y'
			limit 1;
		
		select c_currency_id 
		into v_currency
		from ad_org
		where ad_org_id = v_corecord.ad_org_id;
		
		select c_paymentterm_id
		into v_payterm_id
		from c_paymentterm
		where isdefault = 'Y'
		limit 1;
		
		select m_product_id, c_uom_id 
		into v_prod
		from m_product
		where m_product_id = v_corecord.em_smspr_product_id;
		
		select c_tax_id 
		into v_tax
		from c_tax ct
		left join c_taxcategory ctg on ctg.c_taxcategory_id = ct.c_taxcategory_id
		where 
		ctg.isdefault = 'Y'
		and ct.isdefault = 'Y'
		limit 1;
		
		select c_doctype_id
		into v_dtype_id
		from c_doctype
		where docbasetype = 'SOO'
			and docsubtypeso = 'SO'
			and isreturn = 'N'
			limit 1;
		
		if v_dtype_id is null then
			
			RAISE_APPLICATION_ERROR(-20000, 'Requiere configurar un documento de tipo pedido venta estandar');
		
		end if;
		
		RAISE LOG '%', 'Info: ' || v_corecord ; --OBTG:-20000--

		vid_CC:= get_uuid();

		INSERT INTO public.c_costcenter(
			c_costcenter_id, 
			ad_client_id, 
			ad_org_id, 
			isactive, 
			created, 
			createdby, 
			updated, 
			updatedby, 
			value, 
			name, 
			description, 
			issummary, 
			em_smsp_bpartner_id,
			em_smsp_ad_user_id, 
			em_smsp_approvalstatus_id, 
			em_smsp_projectstatus, 
			em_smsp_remarks, 
			em_smsp_total, 
			em_smsp_rentability)
		VALUES (
			vid_CC, 
			v_corecord.ad_client_id, 
			v_corecord.ad_org_id,
			'Y', 
			now(),
			v_User_ID, 
			now(),
			v_User_ID, 
			v_corecord.opportunity_name, 
			v_corecord.opportunity_name, 
			null, 
			null, 
			v_corecord.c_bpartner_id, 
			v_corecord.em_smspr_ad_user_id, 
			null, 
			null, 
			null, 
			v_corecord.GrandTotal, 
			null);
			
		update c_order 
		set em_smsp_ccostcenter_id = vid_CC
		where c_order_id = v_Record_ID;			
			
		SELECT ad_sequence_doctype(v_dtype_id, NULL, 'Y') INTO v_document_no_seq FROM dual;
-- 		INSERT INTO public.c_order(
			
-- 			c_order_id, 
-- 			ad_client_id, 
-- 			ad_org_id, 
-- 			isactive, 
-- 			created, 
-- 			createdby, 
-- 			updated, 
-- 			updatedby, 
-- 			issotrx, 
-- 			documentno, 
-- 			docstatus, 
-- 			docaction, 
-- 			processing, 
-- 			processed, 
-- 			c_doctype_id, 
-- 			c_doctypetarget_id, 
-- 			dateordered, 
-- 			datepromised, 
-- 			dateacct, 
-- 			c_bpartner_id, 
-- 			c_bpartner_location_id, 
-- 			c_currency_id, 
-- 			paymentrule, 
-- 			c_paymentterm_id, 
-- 			invoicerule, 
-- 			deliveryrule, 
-- 			freightcostrule, 
-- 			deliveryviarule, 
-- 			priorityrule,
-- 			m_warehouse_id,
-- 			m_pricelist_id,
-- 			c_costcenter_id)
-- 		VALUES (
-- 			vid_CC, 
-- 			v_corecord.ad_client_id, 
-- 			v_corecord.ad_org_id,
-- 			'Y', 
-- 			TO_DATE(NOW()),
-- 			v_User_ID, 
-- 			TO_DATE(NOW()),
-- 			v_User_ID, 
-- 			'Y', 
-- 			v_document_no_seq, 
-- 			'DR', 
-- 			'CO', 
-- 			'N', 
-- 			'N', 
-- 			'0', 
-- 			v_dtype_id, 
-- 			v_corecord.DateOrdered, 
-- 			v_corecord.datepromised, 
-- 			v_corecord.dateacct, 
-- 			v_bpartner.pid, 
-- 			v_bpartner.loc, 
-- 			v_currency, 
-- 			'P', 
-- 			v_payterm_id, 
-- 			'I', 
-- 			'A', 
-- 			'I', 
-- 			'P', 
-- 			'5',
-- 			v_corecord.m_warehouse_id,
-- 			v_corecord.m_pricelist_id,
-- 			vid_CC);	
		
-- 		for cur_orderline in (
-- 			SELECT *
-- 			FROM c_orderline a 
-- 			WHERE a.c_order_id = 
-- 				(select co.c_order_id
-- 				from c_order co
-- 				left join opcrm_opportunities oo on oo.opcrm_opportunities_id = co.em_smspr_opportunities_id
-- 				where co.EM_Smspr_Opportunities_ID = v_corecord.EM_Smspr_Opportunities_ID
-- 				)
-- 		)LOOP
-- 			INSERT INTO public.c_orderline(
-- 				c_orderline_id, 
-- 				ad_client_id, 
-- 				ad_org_id, 
-- 				isactive, 
-- 				created, 
-- 				createdby, 
-- 				updated, 
-- 				updatedby, 
-- 				c_order_id, 
-- 				line, 
-- 				m_product_id, 
-- 				m_warehouse_id, 
-- 				c_uom_id,
-- 				c_currency_id,
-- 				c_tax_id,
-- 				dateordered,
-- 				PriceActual,
-- 				qtyordered

-- 			)
-- 			VALUES (
-- 				get_uuid(), 
-- 				v_corecord.ad_client_id, 
-- 				v_corecord.ad_org_id,
-- 				'Y', 
-- 				TO_DATE(NOW()),
-- 				v_User_ID, 
-- 				TO_DATE(NOW()),
-- 				v_User_ID, 
-- 				vid_CC,
-- 				cur_orderline.line,
-- 				cur_orderline.m_product_id,
-- 				cur_orderline.m_warehouse_id,
-- 				cur_orderline.c_uom_id,
-- 				cur_orderline.c_currency_id ,--v_currency,
-- 				cur_orderline.c_tax_id ,--v_tax,
-- 				v_corecord.DateOrdered,
-- 				cur_orderline.PriceActual,
-- 				cur_orderline.qtyordered

-- 			);
		
		
-- 		END LOOP;
		
		
		
		RAISE LOG '%', 'Info: ' || v_corecord ; --OBTG:-20000--

        DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message);
        AD_UPDATE_PINSTANCE(P_Instance_ID, NULL, 'N', v_Result, v_Message);

        RETURN;
    END; --BODY
    
    EXCEPTION WHEN OTHERS THEN
        v_ResultStr:= '@ERROR=' || SQLERRM;
        DBMS_OUTPUT.PUT_LINE( v_ResultStr) ;
        ROLLBACK;
        AD_UPDATE_PINSTANCE(P_Instance_ID, NULL, 'N', 0, v_ResultStr);
END SMSCO_CREATEPROYECT
]]></body>
    </function>
  </database>
